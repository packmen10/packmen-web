import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'

export const apiSlice=createApi({
    reducerPath:"apiSlice",
    baseQuery:fetchBaseQuery({
        baseUrl:"http://localhost:3000",
    }),
    tagTypes:['stores','invoice','seller','customer','work_order_no','employee','issue_not','bom','mir','machining_log','job_card','out_s','qc','po'],
    endpoints:(builder)=>({
        getPost:builder.query({
            query:()=>"/headeritems",
        }),
        getStoreItemsForInvoice:builder.query({
            query:()=>"/store/?fields=name",
            providesTags:["stores"]
        }),
        getStoreItems:builder.query({
            query:()=>"/store",
            providesTags:["stores"]
        }),
        getStoreItem:builder.query({
            query:(id)=>`/store/${id}`,
            providesTags:["stores"]
        }),
        getStoreItemM:builder.mutation({
            query:(id)=>`/store/${id}`,
            providesTags:["stores"]
        }),
        createStoreItem:builder.mutation({
            query:(body)=>({
                url:`/store`,
                method:"POST",
                body
            }),
            invalidatesTags:["stores"]
        }),
        deleteStoreItem:builder.mutation({
            query:(id)=>({
                url:`/store/${id}`,
                method:"DELETE",
            }),
            invalidatesTags:["stores"]
        }),
        updateStoreItem:builder.mutation({
            query:({id,...body})=>{
                return{
                    url:`/store/${id}`,
                    method:"PATCH",
                    body
                }
            },
            invalidatesTags:["stores"]
        }),
        updateStoreItemStock:builder.mutation({
            query:(body)=>{
                return {
                    url:"/update_stock_quantity",
                    method:'PATCH',
                    body
                }
            },
            invalidatesTags:["stores"]
        }),
        getStoreLeftMenu:builder.query({
            query:()=> "/storeLeftSideMenueText",
        }),
        getStoreRightCreateText:builder.query({
            query:()=>"/storeRightSideCreate",
        }),
        getInvoiceSideText:builder.query({
            query:()=>"/invoiceSideText",
        }),
        getAllSellers:builder.query({
            query:()=>'/sellers',
            providesTags:["seller"]
        }),
        getSellerById:builder.mutation({
            query:(id)=>`/sellers/${id}`
        }),
        addSeller:builder.mutation({
            query:(body)=>({
                url:'/sellers',
                method:'POST',
                body
            }),
            invalidatesTags:["seller"]
        }),
        getSellers:builder.query({
            query:(id)=>`/sellers/${id}`,
            providesTags:["seller"]
        }),
        updateSellers:builder.mutation({
            query:({id,...body})=>({
                url:`/sellers/${id}`,
                method:'PATCH',
                body
            }),
            invalidatesTags:["seller"]
        }),
        deleteSeller:builder.mutation({
            query:(id)=>({
                url:`/sellers/${id}`,
                method:'DELETE',
            }),
            invalidatesTags:["seller"]
        }),
        addNewInvoice:builder.mutation({
            query:(body)=>({
                url:`/invoice`,
                method:"POST",
                body
            }),
            invalidatesTags:['invoice']
        }),
        getAllInvoice:builder.query({
            query:()=>"/invoice",
            providesTags:['invoice']
        }),
        getInvoice:builder.query({
            query:(id)=>`/invoice/${id}`,
            providesTags:['invoice']
        }),
        updateInvoice:builder.mutation({
            query:({id,...body})=>({
                url:`/invoice/${id}`,
                method:'PATCH',
                body
            }),
            invalidatesTags:['invoice']
        }),
        deleteInvoice:builder.mutation({
            query:(id)=>({
                url:`/invoice/${id}`,
                method:"DELETE",
            }),
            invalidatesTags:["invoice"]
        }),
        getStoretemBySearch:builder.query({
            query:(query)=>`/storeSearch/?name=${query}`
        }),
        getSearchM:builder.mutation({
            query:(val)=>`/storeSearch/?name=${val}`
        }),
        getAllCustomer:builder.query({
            query:()=>'/customer',
            providesTags:['customer']
        }),
        getCustomer:builder.mutation({
            query:(id)=>`/customer/${id}`,
            providesTags:['customer']
        }),
        getCustomerQ:builder.query({
            query:(id)=>`/customer/${id}`,
            providesTags:['customer']
        }),
        deleteCustomer:builder.mutation({
            query:(id)=>({
                url:`/customer/${id}`,
                method:'DELETE'
            }),
            invalidatesTags:['customer']
        }),
        updateCustomer:builder.mutation({
            query:({id,...body})=>({
                url:`/customer/${id}`,
                method:'PATCH',
                body,
            }),
            invalidatesTags:['customer']
        }),
        createCustomer:builder.mutation({
            query:(body)=>({
                url:`/customer`,
                method:'POST',
                body,
            }),
            invalidatesTags:['customer']
        }),
        getAllWorkOrderNo:builder.query({
            query:()=>'/work_order_no',
            providesTags:['work_order_no']
        }),
        getWorckOrdernoById:builder.mutation({
            query:(id)=>`/work_order_no/${id}`,
            providesTags:['work_order_no']

        }),
        getWorkOrder:builder.query({
            query:(id)=>`/work_order_no/${id}`,
            providesTags:['work_order_no']
        }),
        createWorkOrderNo:builder.mutation({
            query:(body)=>({
                url:`/work_order_no`,
                method:'POST',
                body,
            }),
            invalidatesTags:['work_order_no']
        }),
        updateWorkOrderNo:builder.mutation({
            query:({id,...body})=>({
                url:`/work_order_no/${id}`,
                method:'PATCH',
                body
            }),
            invalidatesTags:['work_order_no']
        }),
        deleteWorkOrderNo:builder.mutation({
            query:(id)=>({
                url:`/work_order_no/${id}`,
                method:'DELETE',
            }),
            invalidatesTags:['work_order_no']
        }),
        getAllEmployees:builder.query({
            query:()=>'/employee',
            providesTags:['employee']
        }),
        getEmployeeById:builder.mutation({
            query:(id)=>`/employee/${id}`,
            providesTags:['employee']
        }),
        addNewEmployee:builder.mutation({
            query:(body)=>({
                url:'/employee',
                method:'POST',
                body
            }),
            invalidatesTags:['employee']
        }),
        updateEmployee:builder.mutation({
            query:({id,...body})=>({
                url:`/employee/${id}`,
                method:'PATCH',
                body
            }),
            invalidatesTags:['employee']
        }),
        deleteEmployee:builder.mutation({
            query:(id)=>({
                url:`/employee/${id}`,
                method:'DELETE',
            }),
            invalidatesTags:['employee']
        }),
        searchEmployee:builder.query({
            query:(query)=>`/search_employee/?name=${query}`
        }),
        searchWorkOrderNo:builder.query({
            query:(query)=>`/search_work_order_no/?work_no=${query}`
        }),
        addNewIssueNot:builder.mutation({
            query:(body)=>({
                url:`/issue_not`,
                method:'POST',
                body
            }),
            invalidatesTags:['issue_not']
        }),
        getAllIssueNot:builder.query({
            query:()=>`/issue_note`,
            providesTags:['issue_not']
        }),
        getIssueNotById:builder.query({
            query:(id)=>({
                url:`/issue_note/${id}`,
                method:'GET',
            }),
            providesTags:['issue_not']
        }),
        deleteIssueNot:builder.mutation({
            query:(id)=>({
                url:`/issue_not/${id}`,
                method:'DELETE',
            }),
            invalidatesTags:['issue_not']
        }),
        updateIssueNot:builder.mutation({
            query:({id,...body})=>({
                url:`/issue_not/${id}`,
                method:'PATCH',
                body
            }),
            invalidatesTags:['issue_not']
        }),
        updateStockItemDecrees:builder.mutation({
            query:(body)=>({
                url:'/update_stock_decrees',
                method:'PATCH',
                body
            }),
            invalidatesTags:['issue_not']
        }),
        updateIssueNotItems:builder.mutation({
            query:(body)=>({
                url:'/add_item_in_issue',
                method:'PATCH',
                body
            }),
            invalidatesTags:['issue_not']
        }),
        updatingStoreItemsbyIssueNot:builder.mutation({
            query:(body)=>({
                url:'update_items_quantity',
                method:'PATCH',
                body
            }),
            invalidatesTags:['issue_not','stores']
        }),
        addBom:builder.mutation({
            query:(body)=>({
                url:'/bom_detailes',
                method:"POST",
                body
            }),
            invalidatesTags:['bom']
        }),
        getAllBom:builder.query({
            query:()=>"/bom_detailes",
            providesTags:['bom']
        }),
        updateBom:builder.mutation({
            query:({id,...body})=>({
                url:`/bom_detailes/${id}`,
                method:'PATCH',
                body
            }),
            invalidatesTags:['bom']
        }),
        getBomById:builder.query({
            query:(id)=>({
                url:`/bom_detailes/${id}`,
                method:'GET'
            }),
            providesTags:['bom']
        }),
        getbomByWorkOrderId:builder.query({
            query:(id)=>`/getbomByWorkOrderId/${id}`,
            providesTags:['bom']
        }),
        addNewMir:builder.mutation({
            query:(body)=>({
                url:`/mir_detailes`,
                method:'POST',
                body
            }),
            invalidatesTags:['mir']
        }),
        getAllMir:builder.query({
            query:()=>'/mir_detailes',
            providesTags:['mir']
        }),
        updateMirItems:builder.mutation({
            query:(body)=>({
                url:'/update_mir_items',
                method:'PATCH',
                body
            }),
            invalidatesTags:['mir']
        }),
        updateMir:builder.mutation({
            query:({id,...body})=>({
                url:`/mir_detailes/${id}`,
                method:'PATCH',
                body
            }),
            invalidatesTags:['mir']
        }),
        getMirById:builder.query({
            query:(id)=>`/mir_detailes/${id}`,
            providesTags:['mir']
        }),
        getAllMachining_log:builder.query({
            query:()=>`/machining_log`,
            providesTags:['machining_log']
        }),
        addMachinig_log:builder.mutation({
            query:(body)=>({
                url:'/machining_log',
                method:'POST',
                body
            }),
            invalidatesTags:['machining_log']
        }),
        getMahining_log:builder.query({
            query:(id)=>({
                url:`/machining_log/${id}`,
                method:'GET',
            }),
            providesTags:['machining_log']
        }),
        deleteMachining_log:builder.mutation({
            query:(id)=>({
                url:`/machining_log/${id}`,
                method:'DELETE'
            }),
            invalidatesTags:['machining_log']

        }),
        updateMachinig_log:builder.mutation({
            query:({id,...body})=>({
                url:`/machining_log/${id}`,
                method:'PATCH',
                body
            }),
            invalidatesTags:['machining_log']
        }),
        addJobCard:builder.mutation({
            query:(body)=>({
                url:`/job_card`,
                method:'POST',
                body
            }),
            invalidatesTags:['job_card']
        }),
        getJobCard:builder.query({
            query:(id)=>({
                url:`/job_card/${id}`,
            }),
            providesTags:['job_card']
        }),
        getAllJobCard:builder.query({
            query:()=>`/job_card`,
            providesTags:['job_card']
        }),
        updateJobCard:builder.mutation({
            query:({id,...body})=>({
                url:`/job_card/${id}`,
                method:'PATCH',
                body
            }),
            invalidatesTags:['job_card']
        }),
        deleteJobCard:builder.mutation({
            query:(id)=>`/job_card/${id}`,
            invalidatesTags:['job_card']
        }),
        getAllOutSource:builder.query({
            query:()=>`/out_source`,
            providesTags:['out_s']
        }),
        getOutSource:builder.query({
            query:(id)=>`/out_source/${id}`,
            providesTags:['out_s']
        }),
        addOutSource:builder.mutation({
            query:(body)=> ({
                url:`/out_source`,
                method:'POST',
                body
            }),
            invalidatesTags:['out_s']
        }),
        updateOutSource:builder.mutation({
            query:({id,...body})=>({
                url:`/out_source/${id}`,
                method:'PATCH',
                body
            }),
            invalidatesTags:['out_s','bom']
        }),
        deleteOutSource:builder.mutation({
            query:(id)=>({
              url:`/out_source/${id}`,
            method:'DELETE',
            }),
            invalidatesTags:['out_s']
        }),
        getdataFromMirForBom:builder.query({
            query:(id)=>`/mir_for_bom/${id}`,
            providesTags:['mir']
        }),
        getDetailesAboutOutSourceMachineLog:builder.query({
            query:(id)=>`/detailesAboutOutSourceMachineLog/${id}`,
            providesTags:['out_s','machining_log']
        }),
        getAllQc:builder.query({
            query:()=>`/qc`,
            providesTags:['qc']
        }),
        getQc:builder.query({
            query:(id)=>`/qc/${id}`,
            providesTags:['qc']
        }),
        updateQc:builder.mutation({
            query:({id,...body})=>({
                url:`/qc/${id}`,
                method:'PATCH',
                body
            }),
            invalidatesTags:['qc']
        }),
        addQc:builder.mutation({
            query:(body)=>({
                url:`/qc`,
                method:'POST',
                body
            }),
            invalidatesTags:['qc']
        }),
        deleteQc:builder.mutation({
            query:()=>({
                url:`/qc`,
                method:'DELETE',
            }),
            invalidatesTags:['qc']
        }),
        getQcInTheBom:builder.query({
            query:(id)=>`/qc_detailes_bom/${id}`,
            providesTags:['qc']
        }),
        getAllPo:builder.query({
            query:()=>`/po`,
            providesTags:['po']
        }),
        getPo:builder.query({
            query:(id)=>`/po/${id}`,
            providesTags:['po']
        }),
        updatePo:builder.mutation({
            query:({id,...body})=>({
                url:`/po/${id}`,
                method:'PATCH',
                body
            }),
            invalidatesTags:['po']
        }),
        addPo:builder.mutation({
            query:(body)=>({
                url:`/po`,
                method:'POST',
                body
            }),
            invalidatesTags:['po']
        }),
        deletePo:builder.mutation({
            query:()=>({
                url:`/po`,
                method:'DELETE',
            }),
            invalidatesTags:['po']
        }),
        getBomInvoice:builder.query({
            query:(id)=>`/invoiceBom/${id}` 
        }),
        getPercentFromBom:builder.query({
            query:(id)=>`/percentageOfBoms/${id}`
        })
    })
})

export const {
    useGetSellersQuery,
    useGetPostQuery,
    useGetStoreItemsQuery,
    useGetStoreItemQuery,
    useGetStoreItemMMutation,
    useCreateStoreItemMutation,
    useDeleteStoreItemMutation,
    useUpdateStoreItemMutation,
    useGetStoreLeftMenuQuery,
    useGetStoreRightCreateTextQuery,
    useGetInvoiceSideTextQuery,
    useGetStoreItemsForInvoiceQuery,
    useGetAllSellersQuery,
    useAddNewInvoiceMutation,
    useGetAllInvoiceQuery,
    useGetSearchMMutation,
    useGetInvoiceQuery,
    useGetStoretemBySearchQuery,
    useDeleteInvoiceMutation,
    /*sellers */
    useAddSellerMutation,
    useGetSellerByIdMutation,
    useUpdateSellersMutation,
    useDeleteSellerMutation,
    useUpdateInvoiceMutation,
    /*production-customer*/
    useGetAllCustomerQuery,
    useGetCustomerMutation,
    useGetCustomerQQuery,
    useDeleteCustomerMutation,
    useUpdateCustomerMutation,
    useCreateCustomerMutation,
    /* work-order-no*/
    useGetAllWorkOrderNoQuery,
    useDeleteWorkOrderNoMutation,
    useCreateWorkOrderNoMutation,
    useUpdateWorkOrderNoMutation,
    useSearchWorkOrderNoQuery,
    useGetWorckOrdernoByIdMutation,
    useGetWorkOrderQuery,
    /* updateStock */
    useUpdateStoreItemStockMutation,
    useUpdateStockItemDecreesMutation,
    /* employee */
    useGetAllEmployeesQuery,
    useAddNewEmployeeMutation,
    useUpdateEmployeeMutation,
    useDeleteEmployeeMutation,
    useSearchEmployeeQuery,
    useGetEmployeeByIdMutation,
        /* issueNot */
    useAddNewIssueNotMutation,
    useGetAllIssueNotQuery,
    useUpdateIssueNotMutation,
    useGetIssueNotByIdQuery,
    useDeleteIssueNotMutation,
    /* adding items into issuenot*/
    useUpdateIssueNotItemsMutation,
    useUpdatingStoreItemsbyIssueNotMutation,
    /*bom*/
    useAddBomMutation,
    useGetAllBomQuery,
    useUpdateBomMutation,
    useGetbomByWorkOrderIdQuery,
    useGetBomByIdQuery,
    /*mir*/
    useAddNewMirMutation,
    useGetAllMirQuery,
    useUpdateMirItemsMutation,
    useGetMirByIdQuery,
    useUpdateMirMutation,
    /*machining log*/
    useGetAllMachining_logQuery,
    useAddMachinig_logMutation,
    useGetMahining_logQuery,
    useDeleteMachining_logMutation,
    useUpdateMachinig_logMutation,
    /* job_card */
    useAddJobCardMutation,
    useGetJobCardQuery,
    useGetAllJobCardQuery,
    useUpdateJobCardMutation,
    useDeleteJobCardMutation,
    /* out_source */
    useGetAllOutSourceQuery,
    useGetOutSourceQuery,
    useAddOutSourceMutation,
    useUpdateOutSourceMutation,
    useDeleteOutSourceMutation,

    /*qc*/
    useGetAllQcQuery,
    useGetQcQuery,
    useUpdateQcMutation,
    useDeleteQcMutation,
    useAddQcMutation,

    /*work Order bom */
    useGetQcInTheBomQuery,
    useGetdataFromMirForBomQuery,
    useGetDetailesAboutOutSourceMachineLogQuery,
    /* po */
    useGetAllPoQuery,
    useGetPoQuery,
    useAddPoMutation,
    useUpdatePoMutation,
    useDeletePoMutation,
    
    /* bom invoice */
    useGetBomInvoiceQuery,
/* for finding percentage of each bom */
    useGetPercentFromBomQuery
}=apiSlice
